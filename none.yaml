heat_template_version: 2016-10-14T00:00:00.000Z
description: "Create a simple VM using Heat\n"
parameters:
    sg_type:
        type: string
        default: custom
    key:
        type: string
        description: "Name of a KeyPair to enable SSH access to the instance.\n"
        default: mykey
    flavor:
        type: string
        description: 'Instance type for the docker server.'
        default: m1.tiny
    public_net:
        type: string
        description: 'name of public network for which floating IP addresses will be allocated.'
        default: non-prod2
    availabilityZone:
        type: string
        default: nova
    vmAvailabilityZone:
        type: string
        default: JMNG-PE3-NONPROD
    internalNet:
        type: string
        description: 'internal network name'
    internalSubnet:
        type: string
        description: 'internal subnet name'
    securityGroup:
        type: string
        description: 'security group name'
    volumeName:
        type: string
        description: 'name of the bootable volume'
    serverName:
        type: string
        description: 'name of the instance'
    volumeSize:
        type: number
        default: 10
    bootImage:
        type: string
        default: Ubuntu1604
    proxy_ip:
        type: string
        default: 'http://10.157.240.254:8678'
    istelegrafon:
        type: string
        default: restart
    isprodvm:
        type: string
        default: non-prod
    commandLog:
        type: boolean
        default: false
    security_group_id:
        type: string
        description: 'sitk-demo-kap_sg from QA-test hardcoded'
        default: sitk-demo-kap_sg
conditions:
    custom:
        equals:
            - {get_param: sg_type}
            - custom
    defaultsg:
        not:
            equals: [{get_param: sg_type}, custom]
resources:
    security_group:
        type: 'OS::Neutron::SecurityGroup'
        properties:
            name: {get_param: securityGroup}
            rules: [{direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, ethertype: IPv4, protocol: tcp}, {direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 80, port_range_max: 80, ethertype: IPv4, protocol: tcp}, {direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 443, port_range_max: 443, ethertype: IPv4, protocol: tcp}]
        condition: defaultsg
    server_port:
        type: 'OS::Neutron::Port'
        properties:
            network_id: {get_param: internalNet}
            fixed_ips: [{subnet_id: {get_param: internalSubnet}}]
            security_groups: [{if: [custom, {get_param: security_group_id}, {get_resource: security_group}]}]
    server:
        type: 'OS::Nova::Server'
        properties:
            name: {get_param: serverName}
            availability_zone: {get_param: vmAvailabilityZone}
            key_name: {get_param: key}
            flavor: {get_param: flavor}
            networks: [{port: {get_resource: server_port}}]
            block_device_mapping_v2: [{device_name: vda, volume_id: {get_resource: bootable_volume}, delete_on_termination: true}]
            user_data: {str_replace: {template: "sudo -i\necho \"127.0.1.1 $serverName\" >> /etc/hosts\nrm -rf /var/lib/apt/lists/lock\nexport http_proxy=$proxy\nexport https_proxy=$proxy\nexport no_proxy=127.0.0.1,localhost,10,192.168\necho \"export http_proxy=$proxy\" >> /etc/profile.d/proxy.sh\necho \"export https_proxy=$proxy\" >> /etc/profile.d/proxy.sh\necho \"export no_proxy=127.0.0.1,localhost,10,192.168\" >> /etc/profile.d/proxy.sh\n\nif [ $bootImage = \"Ubuntu1604\" ]\nthen\n  echo  > /etc/apt/sources.list\n  echo \"###### Ubuntu Main Repos\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse\"  >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"###### Ubuntu Update Repos\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse\"  >> /etc/apt/sources.list\nelif [ $bootImage = \"Ubuntu1804\" ]\nthen\n  echo  > /etc/apt/sources.list\n  echo \"###### Ubuntu Main Repos\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse\"  >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"###### Ubuntu Update Repos\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list\n  echo \"deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse\"  >> /etc/apt/sources.list\nelse\n  echo \"sources.list was not updated based on bootImage\"\nfi\nif [ $bootImage = \"Ubuntu1604\" ] || [ $bootImage = \"Ubuntu1804\" ]\nthen\n  curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf_1.10.3-1_amd64.deb\n  dpkg -i telegraf_1.10.3-1_amd64.deb\n  if [ $commandLog = True ]\n  then\n    apt-get update -y\n    apt-get install libtool-bin -y\n  fi\nelif [ $bootImage = \"Centos-7.5\" ] || [ $bootImage = \"RHEL-7.5\" ]\nthen\n  curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf-1.10.3-1.x86_64.rpm\n  yum localinstall telegraf-1.10.3-1.x86_64.rpm -y\n  if [ $commandLog = True ]\n  then\n    yum update -y\n    yum install libtool -y\n    sed -i -e 's/secure/auth.log/' /etc/rsyslog.conf\n    service rsyslog restart\n  fi\nelse\n  echo \"Unknown image, assuming debian OS\"\n  curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf_1.10.3-1_amd64.deb\n  dpkg -i telegraf_1.10.3-1_amd64.deb\n  if [ $commandLog = True ]\n  then\n    apt-get update -y\n    apt-get install libtool-bin -y\n  fi\nfi\n\nif [ $commandLog = True ]\nthen\n  rm -f snoopy-install.sh\n  curl -L -o snoopy-install.sh https://github.com/a2o/snoopy/raw/install/doc/install/bin/snoopy-install.sh\n  chmod 755 snoopy-install.sh\n  ./snoopy-install.sh git-master\n  chmod -R 755 /var/log/auth.log\n  snoopy-enable\nelse\n  echo \"snoopy not installed\"\nfi\n\ncurl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64\nchmod +x ./jq\nmv jq /usr/bin\necho \"serverid=$(sudo curl GET  -s 'http://169.254.169.254/openstack/latest/meta_data.json' |jq -r '.uuid' )\" >> /etc/default/telegraf\nmv /etc/telegraf/telegraf.conf /etc/telegraf/telegraf-orig.conf\nif [ $isprodvm = \"non-prod\" ]\nthen\n  curl -o /etc/telegraf/telegraf.conf https://raw.githubusercontent.com/mayankkapoor/statuscheck/test/telegraf_nonprod.conf\nelse\n  curl -o /etc/telegraf/telegraf.conf https://raw.githubusercontent.com/mayankkapoor/statuscheck/test/telegraf_prod.conf\nfi\ncurl -o /etc/telegraf/longrunning.sh https://raw.githubusercontent.com/mayankkapoor/statuscheck/test/longrunning.sh\ncurl -o /etc/telegraf/commands.sh https://raw.githubusercontent.com/mayankkapoor/statuscheck/test/commands.sh\nservice telegraf $istelegrafon\n", params: {$proxy: {get_param: proxy_ip}, $istelegrafon: {get_param: istelegrafon}, $bootImage: {get_param: bootImage}, $isprodvm: {get_param: isprodvm}, $commandLog: {get_param: commandLog}, $serverName: {get_param: serverName}}}}
    server_floating_ip:
        type: 'OS::Nova::FloatingIP'
        properties:
            pool: {get_param: public_net}
    associate_floating_ip:
        type: 'OS::Nova::FloatingIPAssociation'
        properties:
            floating_ip: {get_resource: server_floating_ip}
            server_id: {get_resource: server}
    bootable_volume:
        type: 'OS::Cinder::Volume'
        properties:
            name: {get_param: volumeName}
            size: {get_param: volumeSize}
            availability_zone: {get_param: availabilityZone}
            image: {get_param: bootImage}
outputs:
    network:
        description: 'ip address of vm'
        value:
            get_attr: [server, networks]
