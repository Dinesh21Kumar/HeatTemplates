heat_template_version: 2013-05-23

description: >
  Dockerize a multi-node application with OpenStack Heat.
  This template defines two docker containers running
  apache with php and mysql database.

parameters:
  key:
    type: string
    description: >
      Name of a KeyPair to enable SSH access to the instance. Note that the
      default user is ec2-user.
    default: mykey

  flavor:
    type: string
    description: Instance type for the docker server.
    default: m1.tiny

  image:
    type: string
    description: >
      Name or ID of the image to use for the Docker server.  This needs to be
      built with os-collect-config tools from a fedora base image.
    default: Ubuntu1604

  public_net:
    type: string
    description: name of public network for which floating IP addresses will be allocated.
    default: non-prod2

  NetID:
    type: string
    description: Network ID to use for the instance.
    default: 2f123e83-e728-494d-b694-3cdae6582875

  SubnetId:
    type: string
    default: c6014938-ab67-4a13-b27a-511357693381  
  


resources:
  
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: test_security_group
      rules: [ {"direction": egress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 1,
              "port_range_max": 65535,
              "ethertype": IPv4,
              "protocol": tcp},
             {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 22,
              "port_range_max": 22,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 80,
              "port_range_max": 80,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 443,
              "port_range_max": 443,
              "ethertype": IPv4,
              "protocol": tcp}]    

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: NetID }
      fixed_ips:
        - subnet_id: { get_param: SubnetId  }
      security_groups: 
        - { get_resource: security_group }


  docker_server:
    type: OS::Nova::Server
    properties:
      key_name: {get_param: key}
      image: { get_param: image }
      flavor: { get_param: flavor}
      networks:
        - port: { get_resource: server_port }

      user_data: |
        #!/bin/bash -v
        sudo -i
        export http_proxy=http://10.144.106.132:8678
        export https_proxy=http://10.144.106.132:8678

        apt-get update -y
        apt-get install docker.io -y
        echo "http_proxy=http://10.144.106.132:8678">>/etc/default/docker
        echo "https_proxy=http://10.144.106.132:8678">>/etc/default/docker
        systemctl stop docker
        systemctl start docker
        docker run --name docker-nginx -p 80:80 -d nginx


  server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_net}

  associate_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: server_floating_ip}
      server_id: { get_resource: docker_server}    


outputs:
  url:
    description: Public address of apache
    value:
      str_replace:
        template: http://host
        params:
          host: {get_attr: [docker_server, networks, private, 0]}